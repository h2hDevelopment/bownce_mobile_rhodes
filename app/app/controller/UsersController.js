/*
 * File: app/controller/UsersController.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.UsersController', {
    extend: 'Ext.app.Controller',
    config: {
        refs: {
            navView: '#nav_root',
            formRegister: '#registrationForm'
        },

        control: {
            "#register": {
                tap: 'onRegisterButtonTap'
            },
            "#load": {
                tap: 'onLoadTap'
            },
            "#register_action": {
                tap: 'onRegister'
            },
            "#mylist": {
                select: 'onListSelect'
            },
            "#registrationForm": {
                show: 'onFormpanelShow'
            }
        }
    },

    onRegisterButtonTap: function(button, e, options) {
        var me = this;
        if (!me.register) {
            me.register = Ext.create('MyApp.view.RegistrationsContainer', {
            title: 'Register' });
        }
        this.getNavView().push(me.register);

    },

    onLoadTap: function(button, e, options) {
        var store = Ext.data.StoreManager.lookup('UsersStore');
        var rec = store.getAt(store.getCount()-1);
        this.getFormRegister().setRecord(rec);

    },

    onRegister: function(button, e, options) {
        var store = Ext.data.StoreManager.lookup('UsersStore');
        values = this.getFormRegister().getValues();
        var user = Ext.create('MyApp.model.User');
        user.set("email", values.email);
        user.set("password", values.password);
        user.set("password_confirmation", values.password_confirmation);
        user.set("terms_flag", values.terms_flag);
        var errors = user.validate();
        if (user.isValid() === false) {
            var message = "Please correct the following errors :<br/>";
            var ctr = 1;
            errors.each(function (err) {
                message += ctr++ + ". " + err.getMessage() + '<br/>';
            });    
            Ext.Msg.alert("Failure", message);
            return;
        }

        var me = this;
        //store.add(user);

        Ext.data.JsonP.request({
            url: 'http://app.bownce.com/register_user',
            callbackKey: 'callback',
            params: {
                "user[email]":  user.get("email"),
                "user[password]":  user.get("password"),            
                "user[password_confirmation]":  user.get("password_confirmation")
            },
            success: function(result) {
                if (result.error)
                Ext.Msg.alert("Failure", result.error);
                else {
                    Ext.Msg.alert("Success", "Registration complete!", function() {
                        if (!me.login) {
                            me.login = Ext.create('MyApp.view.LoginContainer', {title: "Login"});
                        }
                        me.getNavView().push(me.login);
                    });
                }
            },
            failure: function(result) {
                Ext.Msg.alert("Error", "Unexpected error occurred.\nPlease try again later.");
            }
        });




    },

    onListSelect: function(dataview, record, options) {
        this.getFormRegister().setRecord(record);
    },

    onFormpanelShow: function(component, options) {
        /*
        var registerButton = Ext.create("Ext.Button", {text: 'Register'});
        this.getNavView().getNavigationBar().add(registerButton);
        */
    }

});